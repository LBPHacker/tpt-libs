name: build

on:
  push:
    branches:
      - 'test'
    tags:
      - 'v*' # TAGNAME=`date +v%Y%m%d%H%M%S` bash -c 'git tag -s -a $TAGNAME -m $TAGNAME'

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      do_release: ${{ steps.prepare.outputs.do_release }}
      matrix: ${{ steps.prepare.outputs.matrix }}
      vtag: ${{ steps.prepare.outputs.vtag }}
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - id: prepare
        run: python ./.github/prepare.py
        env:
          GITHUB_REF: ${{ github.ref }}
      - if: steps.prepare.outputs.do_release == 'yes'
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bash -c './.github/create-release.sh'
  build:
    runs-on: ${{ matrix.runs_on }}
    name: ${{ matrix.job_name }}
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
      - if: matrix.force_msys2_bash == 'yes'
        run: bash -c './.github/force-msys2-bash.sh'
      - if: matrix.force_msys2_bash == 'yes'
        run: bash -c 'pacman -Syu --noconfirm'
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - run: python -m pip install meson ninja
      - if: matrix.bsh_build_platform == 'darwin'
        run: brew install bash coreutils
      - run: bash -c './.github/build.sh'
        env:
          BSH_HOST_ARCH: ${{ matrix.bsh_host_arch }}
          BSH_HOST_PLATFORM: ${{ matrix.bsh_host_platform }}
          BSH_HOST_LIBC: ${{ matrix.bsh_host_libc }}
          BSH_STATIC_DYNAMIC: ${{ matrix.bsh_static_dynamic }}
          BSH_BUILD_PLATFORM: ${{ matrix.bsh_build_platform }}
          BSH_DEBUG_RELEASE: ${{ matrix.bsh_debug_release }}
          BSH_VTAG: ${{ needs.prepare.outputs.vtag }}
      - if: needs.prepare.outputs.do_release == 'yes'
        id: upload_release_asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ASSET_PATH: temp/libraries.zip
          ASSET_NAME: ${{ matrix.asset_name }}.zip
        run: bash -c './.github/upload-release-asset.sh'
      - if: needs.prepare.outputs.do_release == 'yes'
        run: bash -c './.github/wrapfile.sh'
        env:
          BSH_HOST_ARCH: ${{ matrix.bsh_host_arch }}
          BSH_HOST_PLATFORM: ${{ matrix.bsh_host_platform }}
          BSH_HOST_LIBC: ${{ matrix.bsh_host_libc }}
          BSH_STATIC_DYNAMIC: ${{ matrix.bsh_static_dynamic }}
          BSH_BUILD_PLATFORM: ${{ matrix.bsh_build_platform }}
          BSH_DEBUG_RELEASE: ${{ matrix.bsh_debug_release }}
          BSH_VTAG: ${{ needs.prepare.outputs.vtag }}
          ASSET_URL: ${{ steps.upload_release_asset.outputs.browser_download_url }}
      - if: needs.prepare.outputs.do_release == 'yes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ASSET_PATH: temp/libraries.wrap
          ASSET_NAME: ${{ matrix.asset_name }}.wrap
        run: bash -c './.github/upload-release-asset.sh'
